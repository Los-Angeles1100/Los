import { ClientTypes, IClient, IClientEvents } from "@walletconnect/types";
export declare class Client extends IClient {
    readonly protocol = "wc";
    readonly version = 2;
    readonly name: IClient["name"];
    readonly metadata: IClient["metadata"];
    core: IClient["core"];
    logger: IClient["logger"];
    events: IClient["events"];
    engine: IClient["engine"];
    pairing: IClient["pairing"];
    session: IClient["session"];
    proposal: IClient["proposal"];
    history: IClient["history"];
    expirer: IClient["expirer"];
    static init(opts?: ClientTypes.Options): Promise<Client>;
    constructor(opts?: ClientTypes.Options);
    get context(): string;
    on: IClientEvents["on"];
    once: IClientEvents["once"];
    off: IClientEvents["off"];
    removeListener: IClientEvents["removeListener"];
    connect: IClient["connect"];
    pair: IClient["pair"];
    approve: IClient["approve"];
    reject: IClient["reject"];
    update: IClient["update"];
    extend: IClient["extend"];
    request: IClient["request"];
    respond: IClient["respond"];
    ping: IClient["ping"];
    emit: IClient["emit"];
    disconnect: IClient["disconnect"];
    find: IClient["find"];
    private initialize;
}
//# sourceMappingURL=client.d.ts.map